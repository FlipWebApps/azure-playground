# See:
# - https://docs.microsoft.com/en-us/azure/devops/pipelines/targets/azure-machine-learning?view=azure-devops&tabs=yaml for info.
# - https://docs.microsoft.com/en-us/azure/machine-learning/service/reference-azure-machine-learning-cli#experiments
trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - ml-service/*

pool:
  vmImage: 'Ubuntu-16.04'

steps:

- task: AzureCLI@1
  displayName: 'Install the CLI'
  inputs:
    azureSubscription: '$(connectedServiceNameARM)'
    scriptLocation: inlineScript
    inlineScript: |
     # Install the Azure ML CLI extension (Learn more: https://aka.ms/aml-cli).
     az extension add -n azure-cli-ml

- task: AzureCLI@1
  displayName: 'Attach folder to workspace'
  inputs:
    azureSubscription: '$(connectedServiceNameARM)'
    scriptLocation: inlineScript
    inlineScript: |
     # Attach a workspace configuration to a folder to enable CLI contextual awareness (Learn more: https://aka.ms/aml-cli-resource).
     az ml folder attach -w $(workspaceName) -g $(resourceGroupName)

- task: AzureCLI@1
  displayName: 'Create compute for training'
  inputs:
    azureSubscription: '$(connectedServiceNameARM)'
    scriptLocation: inlineScript
    inlineScript: 'az ml computetarget create amlcompute -n cpu-compute --vm-size STANDARD_D2_V2 --max-nodes 4'
  
- task: AzureCLI@1
  displayName: 'Submit script run'
  inputs:
    azureSubscription: '$(connectedServiceNameARM)'
    scriptLocation: inlineScript
    workingDirectory: ml-service
    inlineScript: |
     # runconfig (-c) should be in a subfolder
     pwd
     ls
     az ml run submit-script -c sklearn -e mltest-iris-devops -d myenv.yml --source-directory train train.py

# The below (from examples) will always fail as the model only exists in the run output. We would need to download
# so perhaps best just to use python and the API where we have more control.


# - task: AzureCLI@1
#   displayName: 'Register model'
#   inputs:
#     azureSubscription: '$(connectedServiceNameARM)'
#     scriptLocation: inlineScript
#     inlineScript: 'az ml model register -n mltest-iris -p mltest-iris-sklearn.joblib'

# - task: AzureCLI@1
#   displayName: 'Deploy model'
#   inputs:
#     azureSubscription: '$(connectedServiceNameARM)'
#     scriptLocation: inlineScript
#     inlineScript: 'az ml model deploy -n acicicd -f model.json --ic inferenceConfig.yml --dc deploymentConfig.yml --overwrite'



# - task: AzureCLI@1
#   displayName: 'Train Model'
#   inputs:
#     azureSubscription: '$(connectedServiceNameARM)'
#     scriptLocation: inlineScript
#     inlineScript: |
#      # Start a run of the experiment (Learn more: https://aka.ms/aml-cli-run).
#      { az ml run submit-script -c $(runConfig) -t runmetadata.json; } &&
#      # Register a model with Azure Machine Learning (Learn more: https://aka.ms/aml-cli-model).
#      { az ml model register -n $(modelName) --asset-path $(modelAssetPath) -f runmetadata.json -t modelmetadata.json; }

# - task: AzureCLI@1
#   displayName: 'Deploy Model'
#   inputs:
#     azureSubscription: '$(connectedServiceNameARM)'
#     scriptLocation: inlineScript
#     inlineScript: |
#      # Deploy the registered model to AKS (Learn more: https://aka.ms/aml-cli-model).
#      az ml model deploy -n $(serviceName) --overwrite -f modelmetadata.json --ic $(inferenceConfigFile) --dc $(deploymentConfigFile) --ct $(aksComputeName)
